<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niule.znxj.web.dao.AdmininfoMapper" >
  <resultMap id="BaseResultMap" type="com.niule.znxj.web.model.Admininfo" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="createuser" property="createuser" jdbcType="BIGINT" />
    <result column="createdate" property="createdate" jdbcType="TIMESTAMP" />
    <result column="expirydate" property="expirydate" jdbcType="TIMESTAMP" />
    <result column="roleid" property="roleid" jdbcType="INTEGER" />
    <result column="rolename" property="roles.rolename" jdbcType="VARCHAR" />

    <result column="siteid" property="siteid" jdbcType="INTEGER" />
    <result column="customid" property="site.customid" jdbcType="VARCHAR" />
    <result column="failnums" property="failnums" jdbcType="INTEGER" />
    <result column="freezetime" property="freezetime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, username, password, state, createuser, createdate, expirydate, roleid, siteid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.niule.znxj.web.model.AdmininfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    a.id,a.username,a.password,a.state,a.createuser,a.createdate,a.expirydate,a.roleid,r.rolename,s.customid
    from admininfo a
    left join roles r on a.roleid=r.roleid
    left join siteareainfo s on s.id=a.siteid
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    a.id,a.username,a.password,a.state,a.createuser,a.createdate,a.expirydate,a.roleid,a.siteid,r.rolename,s.customid
    from admininfo a left join roles r on a.roleid=r.roleid left join siteareainfo s on s.id=a.siteid
    where a.id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from admininfo
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.niule.znxj.web.model.AdmininfoExample" >
    delete from admininfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.niule.znxj.web.model.Admininfo" >
    insert into admininfo (id, username, password, 
      state, createuser, createdate, 
      expirydate, roleid, siteid
      )
    values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{state,jdbcType=INTEGER}, #{createuser,jdbcType=BIGINT}, now(),
      #{expirydate,jdbcType=TIMESTAMP}, #{roleid,jdbcType=INTEGER}, #{siteid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.niule.znxj.web.model.Admininfo" >
    insert into admininfo
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="createuser != null" >
        createuser,
      </if>
      <if test="createdate != null" >
        createdate,
      </if>
      <if test="expirydate != null" >
        expirydate,
      </if>
      <if test="roleid != null" >
        roleid,
      </if>
      <if test="siteid != null" >
        siteid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="createuser != null" >
        #{createuser,jdbcType=BIGINT},
      </if>
      <if test="createdate != null" >
        #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="expirydate != null" >
        #{expirydate,jdbcType=TIMESTAMP},
      </if>
      <if test="roleid != null" >
        #{roleid,jdbcType=INTEGER},
      </if>
      <if test="siteid != null" >
        #{siteid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.niule.znxj.web.model.AdmininfoExample" resultType="java.lang.Integer" >
    select count(*) from admininfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update admininfo
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.username != null" >
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.createuser != null" >
        createuser = #{record.createuser,jdbcType=BIGINT},
      </if>
      <if test="record.createdate != null" >
        createdate = #{record.createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expirydate != null" >
        expirydate = #{record.expirydate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.roleid != null" >
        roleid = #{record.roleid,jdbcType=INTEGER},
      </if>
      <if test="record.siteid != null" >
        siteid = #{record.siteid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update admininfo
    set id = #{record.id,jdbcType=BIGINT},
      username = #{record.username,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=INTEGER},
      createuser = #{record.createuser,jdbcType=BIGINT},
      createdate = #{record.createdate,jdbcType=TIMESTAMP},
      expirydate = #{record.expirydate,jdbcType=TIMESTAMP},
      roleid = #{record.roleid,jdbcType=INTEGER},
      siteid = #{record.siteid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.niule.znxj.web.model.Admininfo" >
    update admininfo
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="createuser != null" >
        createuser = #{createuser,jdbcType=BIGINT},
      </if>
      <if test="createdate != null" >
        createdate = #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="expirydate != null" >
        expirydate = #{expirydate,jdbcType=TIMESTAMP},
      </if>
      <if test="roleid != null" >
        roleid = #{roleid,jdbcType=INTEGER},
      </if>
      siteid = #{siteid,jdbcType=INTEGER},
      <if test="failnums != null" >
        failnums = #{failnums,jdbcType=INTEGER},
      </if>
      freezetime = #{freezetime,jdbcType=TIMESTAMP},  
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.niule.znxj.web.model.Admininfo" >
    update admininfo
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      createuser = #{createuser,jdbcType=BIGINT},
      createdate = #{createdate,jdbcType=TIMESTAMP},
      expirydate = #{expirydate,jdbcType=TIMESTAMP},
      roleid = #{roleid,jdbcType=INTEGER},
      siteid = #{siteid,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="login" parameterType="com.niule.znxj.web.model.AdmininfoExample" resultMap="BaseResultMap">
    select * from admininfo where username=#{username} and password=#{password}
  </select>
  <select id="getexistuname" parameterType="string" resultMap="BaseResultMap">
    select * from admininfo where username=#{0}
  </select>
  <select id="admincount" resultType="int" parameterType="int">
    select count(id) from admininfo where roleid=#{0}
  </select>
  <select id="queryUserIsExistPower" parameterType="string" resultMap="BaseResultMap">
    select * from admininfo where username=#{0} and password=#{1}
  </select>
</mapper>