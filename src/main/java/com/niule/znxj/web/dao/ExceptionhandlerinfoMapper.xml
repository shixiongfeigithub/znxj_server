<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.niule.znxj.web.dao.ExceptionhandlerinfoMapper" >
  <resultMap id="BaseResultMap" type="com.niule.znxj.web.model.Exceptionhandlerinfo" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="reportid" property="reportid" jdbcType="BIGINT" />
    <result column="taskcode" property="taskcode" jdbcType="VARCHAR" />
    <result column="checkuserid" property="checkuserid" jdbcType="BIGINT" />
    <result column="descontent" property="descontent" jdbcType="VARCHAR" />
    <result column="attachment" property="attachment" jdbcType="VARCHAR" />
    <result column="operatorname" property="operatorname" jdbcType="VARCHAR" />
    <result column="reporttime" property="reporttime" jdbcType="TIMESTAMP" />
    <result column="confirmtime" property="confirmtime" jdbcType="TIMESTAMP" />
    <result column="appointedtime" property="appointedtime" jdbcType="TIMESTAMP" />
    <result column="exceptionclosetime" property="exceptionclosetime" jdbcType="TIMESTAMP" />
    <result column="exceptionstate" property="exceptionstate" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, reportid, taskcode, checkuserid, descontent, attachment, operatorname, reporttime, 
    confirmtime, appointedtime, exceptionclosetime, exceptionstate
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.niule.znxj.web.model.ExceptionhandlerinfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exceptionhandlerinfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from exceptionhandlerinfo
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from exceptionhandlerinfo
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.niule.znxj.web.model.ExceptionhandlerinfoExample" >
    delete from exceptionhandlerinfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.niule.znxj.web.model.Exceptionhandlerinfo" >
    insert into exceptionhandlerinfo (id, reportid, taskcode, 
      checkuserid, descontent, attachment, 
      operatorname, reporttime, confirmtime, 
      appointedtime, exceptionclosetime, 
      exceptionstate)
    values (#{id,jdbcType=BIGINT}, #{reportid,jdbcType=BIGINT}, #{taskcode,jdbcType=VARCHAR}, 
      #{checkuserid,jdbcType=BIGINT}, #{descontent,jdbcType=VARCHAR}, #{attachment,jdbcType=VARCHAR}, 
      #{operatorname,jdbcType=VARCHAR}, #{reporttime,jdbcType=TIMESTAMP}, #{confirmtime,jdbcType=TIMESTAMP}, 
      #{appointedtime,jdbcType=TIMESTAMP}, #{exceptionclosetime,jdbcType=TIMESTAMP}, 
      #{exceptionstate,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.niule.znxj.web.model.Exceptionhandlerinfo" >
    insert into exceptionhandlerinfo
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="reportid != null" >
        reportid,
      </if>
      <if test="taskcode != null" >
        taskcode,
      </if>
      <if test="checkuserid != null" >
        checkuserid,
      </if>
      <if test="descontent != null" >
        descontent,
      </if>
      <if test="attachment != null" >
        attachment,
      </if>
      <if test="operatorname != null" >
        operatorname,
      </if>
      <if test="reporttime != null" >
        reporttime,
      </if>
      <if test="confirmtime != null" >
        confirmtime,
      </if>
      <if test="appointedtime != null" >
        appointedtime,
      </if>
      <if test="exceptionclosetime != null" >
        exceptionclosetime,
      </if>
      <if test="exceptionstate != null" >
        exceptionstate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="reportid != null" >
        #{reportid,jdbcType=BIGINT},
      </if>
      <if test="taskcode != null" >
        #{taskcode,jdbcType=VARCHAR},
      </if>
      <if test="checkuserid != null" >
        #{checkuserid,jdbcType=BIGINT},
      </if>
      <if test="descontent != null" >
        #{descontent,jdbcType=VARCHAR},
      </if>
      <if test="attachment != null" >
        #{attachment,jdbcType=VARCHAR},
      </if>
      <if test="operatorname != null" >
        #{operatorname,jdbcType=VARCHAR},
      </if>
      <if test="reporttime != null" >
        #{reporttime,jdbcType=TIMESTAMP},
      </if>
      <if test="confirmtime != null" >
        #{confirmtime,jdbcType=TIMESTAMP},
      </if>
      <if test="appointedtime != null" >
        #{appointedtime,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptionclosetime != null" >
        #{exceptionclosetime,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptionstate != null" >
        #{exceptionstate,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.niule.znxj.web.model.ExceptionhandlerinfoExample" resultType="java.lang.Integer" >
    select count(*) from exceptionhandlerinfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update exceptionhandlerinfo
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.reportid != null" >
        reportid = #{record.reportid,jdbcType=BIGINT},
      </if>
      <if test="record.taskcode != null" >
        taskcode = #{record.taskcode,jdbcType=VARCHAR},
      </if>
      <if test="record.checkuserid != null" >
        checkuserid = #{record.checkuserid,jdbcType=BIGINT},
      </if>
      <if test="record.descontent != null" >
        descontent = #{record.descontent,jdbcType=VARCHAR},
      </if>
      <if test="record.attachment != null" >
        attachment = #{record.attachment,jdbcType=VARCHAR},
      </if>
      <if test="record.operatorname != null" >
        operatorname = #{record.operatorname,jdbcType=VARCHAR},
      </if>
      <if test="record.reporttime != null" >
        reporttime = #{record.reporttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.confirmtime != null" >
        confirmtime = #{record.confirmtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.appointedtime != null" >
        appointedtime = #{record.appointedtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.exceptionclosetime != null" >
        exceptionclosetime = #{record.exceptionclosetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.exceptionstate != null" >
        exceptionstate = #{record.exceptionstate,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update exceptionhandlerinfo
    set id = #{record.id,jdbcType=BIGINT},
      reportid = #{record.reportid,jdbcType=BIGINT},
      taskcode = #{record.taskcode,jdbcType=VARCHAR},
      checkuserid = #{record.checkuserid,jdbcType=BIGINT},
      descontent = #{record.descontent,jdbcType=VARCHAR},
      attachment = #{record.attachment,jdbcType=VARCHAR},
      operatorname = #{record.operatorname,jdbcType=VARCHAR},
      reporttime = #{record.reporttime,jdbcType=TIMESTAMP},
      confirmtime = #{record.confirmtime,jdbcType=TIMESTAMP},
      appointedtime = #{record.appointedtime,jdbcType=TIMESTAMP},
      exceptionclosetime = #{record.exceptionclosetime,jdbcType=TIMESTAMP},
      exceptionstate = #{record.exceptionstate,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.niule.znxj.web.model.Exceptionhandlerinfo" >
    update exceptionhandlerinfo
    <set >
      <if test="reportid != null" >
        reportid = #{reportid,jdbcType=BIGINT},
      </if>
      <if test="taskcode != null" >
        taskcode = #{taskcode,jdbcType=VARCHAR},
      </if>
      <if test="checkuserid != null" >
        checkuserid = #{checkuserid,jdbcType=BIGINT},
      </if>
      <if test="descontent != null" >
        descontent = #{descontent,jdbcType=VARCHAR},
      </if>
      <if test="attachment != null" >
        attachment = #{attachment,jdbcType=VARCHAR},
      </if>
      <if test="operatorname != null" >
        operatorname = #{operatorname,jdbcType=VARCHAR},
      </if>
      <if test="reporttime != null" >
        reporttime = #{reporttime,jdbcType=TIMESTAMP},
      </if>
      <if test="confirmtime != null" >
        confirmtime = #{confirmtime,jdbcType=TIMESTAMP},
      </if>
      <if test="appointedtime != null" >
        appointedtime = #{appointedtime,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptionclosetime != null" >
        exceptionclosetime = #{exceptionclosetime,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptionstate != null" >
        exceptionstate = #{exceptionstate,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.niule.znxj.web.model.Exceptionhandlerinfo" >
    update exceptionhandlerinfo
    set reportid = #{reportid,jdbcType=BIGINT},
      taskcode = #{taskcode,jdbcType=VARCHAR},
      checkuserid = #{checkuserid,jdbcType=BIGINT},
      descontent = #{descontent,jdbcType=VARCHAR},
      attachment = #{attachment,jdbcType=VARCHAR},
      operatorname = #{operatorname,jdbcType=VARCHAR},
      reporttime = #{reporttime,jdbcType=TIMESTAMP},
      confirmtime = #{confirmtime,jdbcType=TIMESTAMP},
      appointedtime = #{appointedtime,jdbcType=TIMESTAMP},
      exceptionclosetime = #{exceptionclosetime,jdbcType=TIMESTAMP},
      exceptionstate = #{exceptionstate,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>