<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.niule.znxj.web.dao.ExceptionhandlerinfoMapper">
  <resultMap id="BaseResultMap" type="com.niule.znxj.web.model.Exceptionhandlerinfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="reportid" jdbcType="BIGINT" property="reportid" />
    <result column="reportcontentid" jdbcType="BIGINT" property="reportcontentid" />
    <result column="checkuserid" jdbcType="BIGINT" property="checkuserid" />
    <result column="descontent" jdbcType="VARCHAR" property="descontent" />
    <result column="attachment" jdbcType="VARCHAR" property="attachment" />
    <result column="operatorid" jdbcType="BIGINT" property="operatorid" />
    <result column="operatorname" jdbcType="VARCHAR" property="operatorname" />
    <result column="reporttime" jdbcType="TIMESTAMP" property="reporttime" />
    <result column="confirmtime" jdbcType="TIMESTAMP" property="confirmtime" />
    <result column="appointedtime" jdbcType="TIMESTAMP" property="appointedtime" />
    <result column="exceptionclosetime" jdbcType="TIMESTAMP" property="exceptionclosetime" />
    <result column="exceptionstate" jdbcType="INTEGER" property="exceptionstate" />
    <result column="exceptiontype" jdbcType="VARCHAR" property="exceptiontype" />
    <result column="exceptionlever" jdbcType="VARCHAR" property="exceptionlever" />
    <result column="frequency" jdbcType="INTEGER" property="frequency" />
    <result column="uploadstate" jdbcType="INTEGER" property="uploadstate" />
    <result column="uploadtime" jdbcType="TIMESTAMP" property="uploadtime" />

    <result column="equipname" jdbcType="VARCHAR" property="equipname" />
    <result column="checkname" jdbcType="VARCHAR" property="checkname" />
    <result column="reportimg" jdbcType="VARCHAR" property="reportimg" />
    <result column="worker" jdbcType="VARCHAR" property="worker" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="donetime" jdbcType="TIMESTAMP" property="donetime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, reportid, reportcontentid, checkuserid, descontent, attachment, operatorid, operatorname, 
    reporttime, confirmtime, appointedtime, exceptionclosetime, exceptionstate, exceptiontype, 
    exceptionlever, frequency, uploadstate, uploadtime
  </sql>
  <select id="selectByExample" parameterType="com.niule.znxj.web.model.ExceptionhandlerinfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exceptionhandlerinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from exceptionhandlerinfo
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from exceptionhandlerinfo
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.niule.znxj.web.model.ExceptionhandlerinfoExample">
    delete from exceptionhandlerinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.niule.znxj.web.model.Exceptionhandlerinfo">
    insert into exceptionhandlerinfo (id, reportid, reportcontentid, 
      checkuserid, descontent, attachment, 
      operatorid, operatorname, reporttime, 
      confirmtime, appointedtime, exceptionclosetime, 
      exceptionstate, exceptiontype, exceptionlever, 
      frequency, uploadstate, uploadtime
      )
    values (#{id,jdbcType=BIGINT}, #{reportid,jdbcType=BIGINT}, #{reportcontentid,jdbcType=BIGINT}, 
      #{checkuserid,jdbcType=BIGINT}, #{descontent,jdbcType=VARCHAR}, #{attachment,jdbcType=VARCHAR}, 
      #{operatorid,jdbcType=BIGINT}, #{operatorname,jdbcType=VARCHAR}, #{reporttime,jdbcType=TIMESTAMP}, 
      #{confirmtime,jdbcType=TIMESTAMP}, #{appointedtime,jdbcType=TIMESTAMP}, #{exceptionclosetime,jdbcType=TIMESTAMP}, 
      #{exceptionstate,jdbcType=INTEGER}, #{exceptiontype,jdbcType=INTEGER}, #{exceptionlever,jdbcType=INTEGER}, 
      #{frequency,jdbcType=INTEGER}, #{uploadstate,jdbcType=INTEGER}, #{uploadtime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.niule.znxj.web.model.Exceptionhandlerinfo">
    insert into exceptionhandlerinfo
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="reportid != null">
        reportid,
      </if>
      <if test="reportcontentid != null">
        reportcontentid,
      </if>
      <if test="checkuserid != null">
        checkuserid,
      </if>
      <if test="descontent != null">
        descontent,
      </if>
      <if test="attachment != null">
        attachment,
      </if>
      <if test="operatorid != null">
        operatorid,
      </if>
      <if test="operatorname != null">
        operatorname,
      </if>
      <if test="reporttime != null">
        reporttime,
      </if>
      <if test="confirmtime != null">
        confirmtime,
      </if>
      <if test="appointedtime != null">
        appointedtime,
      </if>
      <if test="exceptionclosetime != null">
        exceptionclosetime,
      </if>
      <if test="exceptionstate != null">
        exceptionstate,
      </if>
      <if test="exceptiontype != null">
        exceptiontype,
      </if>
      <if test="exceptionlever != null">
        exceptionlever,
      </if>
      <if test="frequency != null">
        frequency,
      </if>
      <if test="uploadstate != null">
        uploadstate,
      </if>
      <if test="uploadtime != null">
        uploadtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="reportid != null">
        #{reportid,jdbcType=BIGINT},
      </if>
      <if test="reportcontentid != null">
        #{reportcontentid,jdbcType=BIGINT},
      </if>
      <if test="checkuserid != null">
        #{checkuserid,jdbcType=BIGINT},
      </if>
      <if test="descontent != null">
        #{descontent,jdbcType=VARCHAR},
      </if>
      <if test="attachment != null">
        #{attachment,jdbcType=VARCHAR},
      </if>
      <if test="operatorid != null">
        #{operatorid,jdbcType=BIGINT},
      </if>
      <if test="operatorname != null">
        #{operatorname,jdbcType=VARCHAR},
      </if>
      <if test="reporttime != null">
        #{reporttime,jdbcType=TIMESTAMP},
      </if>
      <if test="confirmtime != null">
        #{confirmtime,jdbcType=TIMESTAMP},
      </if>
      <if test="appointedtime != null">
        #{appointedtime,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptionclosetime != null">
        #{exceptionclosetime,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptionstate != null">
        #{exceptionstate,jdbcType=INTEGER},
      </if>
      <if test="exceptiontype != null">
        #{exceptiontype,jdbcType=INTEGER},
      </if>
      <if test="exceptionlever != null">
        #{exceptionlever,jdbcType=INTEGER},
      </if>
      <if test="frequency != null">
        #{frequency,jdbcType=INTEGER},
      </if>
      <if test="uploadstate != null">
        #{uploadstate,jdbcType=INTEGER},
      </if>
      <if test="uploadtime != null">
        #{uploadtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.niule.znxj.web.model.ExceptionhandlerinfoExample" resultType="java.lang.Integer">
    select count(*) from exceptionhandlerinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update exceptionhandlerinfo
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.reportid != null">
        reportid = #{record.reportid,jdbcType=BIGINT},
      </if>
      <if test="record.reportcontentid != null">
        reportcontentid = #{record.reportcontentid,jdbcType=BIGINT},
      </if>
      <if test="record.checkuserid != null">
        checkuserid = #{record.checkuserid,jdbcType=BIGINT},
      </if>
      <if test="record.descontent != null">
        descontent = #{record.descontent,jdbcType=VARCHAR},
      </if>
      <if test="record.attachment != null">
        attachment = #{record.attachment,jdbcType=VARCHAR},
      </if>
      <if test="record.operatorid != null">
        operatorid = #{record.operatorid,jdbcType=BIGINT},
      </if>
      <if test="record.operatorname != null">
        operatorname = #{record.operatorname,jdbcType=VARCHAR},
      </if>
      <if test="record.reporttime != null">
        reporttime = #{record.reporttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.confirmtime != null">
        confirmtime = #{record.confirmtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.appointedtime != null">
        appointedtime = #{record.appointedtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.exceptionclosetime != null">
        exceptionclosetime = #{record.exceptionclosetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.exceptionstate != null">
        exceptionstate = #{record.exceptionstate,jdbcType=INTEGER},
      </if>
      <if test="record.exceptiontype != null">
        exceptiontype = #{record.exceptiontype,jdbcType=INTEGER},
      </if>
      <if test="record.exceptionlever != null">
        exceptionlever = #{record.exceptionlever,jdbcType=INTEGER},
      </if>
      <if test="record.frequency != null">
        frequency = #{record.frequency,jdbcType=INTEGER},
      </if>
      <if test="record.uploadstate != null">
        uploadstate = #{record.uploadstate,jdbcType=INTEGER},
      </if>
      <if test="record.uploadtime != null">
        uploadtime = #{record.uploadtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update exceptionhandlerinfo
    set id = #{record.id,jdbcType=BIGINT},
      reportid = #{record.reportid,jdbcType=BIGINT},
      reportcontentid = #{record.reportcontentid,jdbcType=BIGINT},
      checkuserid = #{record.checkuserid,jdbcType=BIGINT},
      descontent = #{record.descontent,jdbcType=VARCHAR},
      attachment = #{record.attachment,jdbcType=VARCHAR},
      operatorid = #{record.operatorid,jdbcType=BIGINT},
      operatorname = #{record.operatorname,jdbcType=VARCHAR},
      reporttime = #{record.reporttime,jdbcType=TIMESTAMP},
      confirmtime = #{record.confirmtime,jdbcType=TIMESTAMP},
      appointedtime = #{record.appointedtime,jdbcType=TIMESTAMP},
      exceptionclosetime = #{record.exceptionclosetime,jdbcType=TIMESTAMP},
      exceptionstate = #{record.exceptionstate,jdbcType=INTEGER},
      exceptiontype = #{record.exceptiontype,jdbcType=INTEGER},
      exceptionlever = #{record.exceptionlever,jdbcType=INTEGER},
      frequency = #{record.frequency,jdbcType=INTEGER},
      uploadstate = #{record.uploadstate,jdbcType=INTEGER},
      uploadtime = #{record.uploadtime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.niule.znxj.web.model.Exceptionhandlerinfo">
    update exceptionhandlerinfo
    <set>
      <if test="reportid != null">
        reportid = #{reportid,jdbcType=BIGINT},
      </if>
      <if test="reportcontentid != null">
        reportcontentid = #{reportcontentid,jdbcType=BIGINT},
      </if>
      <if test="checkuserid != null">
        checkuserid = #{checkuserid,jdbcType=BIGINT},
      </if>
      <if test="descontent != null">
        descontent = #{descontent,jdbcType=VARCHAR},
      </if>
      <if test="attachment != null">
        attachment = #{attachment,jdbcType=VARCHAR},
      </if>
      <if test="operatorid != null">
        operatorid = #{operatorid,jdbcType=BIGINT},
      </if>
      <if test="operatorname != null">
        operatorname = #{operatorname,jdbcType=VARCHAR},
      </if>
      <if test="reporttime != null">
        reporttime = #{reporttime,jdbcType=TIMESTAMP},
      </if>
      <if test="confirmtime != null">
        confirmtime = #{confirmtime,jdbcType=TIMESTAMP},
      </if>
      <if test="appointedtime != null">
        appointedtime = #{appointedtime,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptionclosetime != null">
        exceptionclosetime = #{exceptionclosetime,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptionstate != null">
        exceptionstate = #{exceptionstate,jdbcType=INTEGER},
      </if>
      <if test="exceptiontype != null">
        exceptiontype = #{exceptiontype,jdbcType=INTEGER},
      </if>
      <if test="exceptionlever != null">
        exceptionlever = #{exceptionlever,jdbcType=INTEGER},
      </if>
      <if test="frequency != null">
        frequency = #{frequency,jdbcType=INTEGER},
      </if>
      <if test="uploadstate != null">
        uploadstate = #{uploadstate,jdbcType=INTEGER},
      </if>
      <if test="uploadtime != null">
        uploadtime = #{uploadtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.niule.znxj.web.model.Exceptionhandlerinfo">
    update exceptionhandlerinfo
    set reportid = #{reportid,jdbcType=BIGINT},
      reportcontentid = #{reportcontentid,jdbcType=BIGINT},
      checkuserid = #{checkuserid,jdbcType=BIGINT},
      descontent = #{descontent,jdbcType=VARCHAR},
      attachment = #{attachment,jdbcType=VARCHAR},
      operatorid = #{operatorid,jdbcType=BIGINT},
      operatorname = #{operatorname,jdbcType=VARCHAR},
      reporttime = #{reporttime,jdbcType=TIMESTAMP},
      confirmtime = #{confirmtime,jdbcType=TIMESTAMP},
      appointedtime = #{appointedtime,jdbcType=TIMESTAMP},
      exceptionclosetime = #{exceptionclosetime,jdbcType=TIMESTAMP},
      exceptionstate = #{exceptionstate,jdbcType=INTEGER},
      exceptiontype = #{exceptiontype,jdbcType=INTEGER},
      exceptionlever = #{exceptionlever,jdbcType=INTEGER},
      frequency = #{frequency,jdbcType=INTEGER},
      uploadstate = #{uploadstate,jdbcType=INTEGER},
      uploadtime = #{uploadtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByReportId" parameterType="map">
    update exceptionhandlerinfo
    set uploadstate = #{uploadstate,jdbcType=INTEGER},
      uploadtime = now()
    where reportid = #{reportid,jdbcType=BIGINT}
    and reportcontentid in
    <foreach collection="reportcontentids"  item="reportcontentid" open="(" separator="," close=")" >
      #{reportcontentid}
    </foreach>
  </update>
  <select id="selectByParam" resultMap="BaseResultMap" parameterType="map">
    SELECT
     e.* ,r.equipname,r.checkname,r.img reportimg ,t.donetime,t.worker,a.username
    FROM
        exceptionhandlerinfo e
    LEFT JOIN reportcontent r ON e.reportcontentid= r.id
    LEFT JOIN taskreportinfo t ON e.reportid = t.id
    LEFT JOIN admininfo a ON e.checkuserid = a.id
    WHERE e.reportid = #{reportid}
    and e.uploadstate in
    <foreach collection="states"  item="state" open="(" separator="," close=")" >
      #{state}
    </foreach>
    and e.exceptiontype in
    <foreach collection="exceptiontypeList"  item="exceptiontype" open="(" separator="," close=")" >
      #{exceptiontype}
    </foreach>
    and e.exceptionlever in
    <foreach collection="exceptionleverList"  item="exceptionlever" open="(" separator="," close=")" >
      #{exceptionlever}
    </foreach>
  </select>

  <select id="selectInfoById" resultMap="BaseResultMap" parameterType="java.lang.Long">
    SELECT
     e.* ,r.checkname,a.username
    FROM
        exceptionhandlerinfo e
    LEFT JOIN reportcontent r ON e.reportcontentid= r.id
    LEFT JOIN admininfo a ON e.checkuserid = a.id
    WHERE e.reportcontentid = #{id}
  </select>
</mapper>